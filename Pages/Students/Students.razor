@page "/students"
@using PschoolClient.Models
@using PschoolClient.Services
@using Microsoft.JSInterop
@inject StudentService StudentService
@inject ParentService ParentService
@inject IJSRuntime JS

<div class="container">
    <div class="mb-3">
        <label for="parentFilter" class="form-label">Filter by Parent</label>
        <select id="parentFilter" class="form-select" @onchange="FilterStudentsByParent">
            <option value="">All Parents</option>
            @foreach (var parent in parents)
            {
                <option value="@parent.Id">@parent.UserName</option>
            }
        </select>
    </div>

    @if (filteredStudents == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (filteredStudents.Count == 0)
    {
        <p>No students available.</p>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Students</h3>
            <button class="btn btn-primary" @onclick="OpenAddStudentDialog">Add Student</button>
             <AddStudentDialog @ref="addStudentDialog" OnStudentAdded="LoadStudents" />
             <EditStudentDialog @ref="editStudentDialog" OnStudentEdited="LoadStudents" />
        </div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Gender</th>
                    <th>Grade</th>
                    <th>Parent</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var student in filteredStudents)
                {
                    <tr>
                        <td>@student.FirstName</td>
                        <td>@student.LastName</td>
                        <td>@student.Gender</td>
                        <td>@student.grade</td>
                        <td>@GetParentName(student.ParentId)</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditStudent(student)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteStudent(student.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    
    }
 </div>

@code {
    private List<Student> students;
    private List<Student> filteredStudents;
    private List<Parent> parents;
    private Student selectedStudent;

    private EditStudentDialog editStudentDialog;
    private AddStudentDialog addStudentDialog;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetStudentsAsync();
        parents = await ParentService.GetParentsAsync();
        filteredStudents = students; // Show all students initially
        await LoadStudents();
    }

    private void FilterStudentsByParent(ChangeEventArgs e)
    {
        var selectedParentId = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedParentId))
        {
            filteredStudents = students; // Show all students if no parent is selected
        }
        else
        {
            filteredStudents = students.Where(s => s.ParentId == int.Parse(selectedParentId)).ToList();
        }
    }

    private async Task EditStudent(Student student)
    {
        selectedStudent = student;
        editStudentDialog.Show(selectedStudent);
        await JS.InvokeVoidAsync("$('#editStudentModal').modal", "show");
    }

    private async Task DeleteStudent(int id)
    {
         await StudentService.DeleteStudent(id);
        await LoadStudents();
    }
    private string GetParentName(int parentId)
    {
        var parent = parents.FirstOrDefault(p => p.Id == parentId);
        return parent != null ? parent.UserName : "Unknown";
    }
    private async Task OpenAddStudentDialog()
    {
        addStudentDialog.Show();
    }

    private async Task LoadStudents()
    {
        students = await StudentService.GetStudentsAsync();
        filteredStudents = new List<Student>(students);
    }
}
